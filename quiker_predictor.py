# -*- coding: utf-8 -*-
"""Quiker Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ctUb6RVLSvY8hjbNw6C3yir_bUmho9E

```
# This is formatted as code
```

# **Data** **Importing**
"""

import pandas as pd
car = pd.read_csv('https://raw.githubusercontent.com/rajtilakls2510/car_price_predictor/refs/heads/master/quikr_car.csv')
car

car.shape

"""## Data Cleaning"""

car.info()

car['year'].unique()

car['Price'].unique()

car['kms_driven'].unique()

car['fuel_type'].unique()

"""# Data Preprocessing"""

##Quality
#year has many non-year Values
#year object to int
#price has AskforPrice
#Price object to int
#kms_driven has kms with integers
#kms_driven object to int
#kms_driven has nan values
#fuel_type has nan values
#keep first 3 words of name

"""## Year Column Cleaning"""

car[car['year'].str.isnumeric()]

"""## Price Column Cleaning"""

# Convert the 'Price' column to string type before applying string operations
car['Price'] = car['Price'].astype(str)
car=car[car['Price']!="Ask For Price"]
car['Price']=car['Price'].str.replace(',','').astype(int)
car['Price'].unique()

"""## kms_driven Column Cleaning"""

# Convert the 'kms_driven' column to string type before applying string operations
car['kms_driven'] = car['kms_driven'].astype(str)
car['kms_driven']=car['kms_driven'].str.split(' ').str.get(0).str.replace(',','')


# Fill NaN values with an empty string before checking if numeric
car['kms_driven'] = car['kms_driven'].fillna('')
car=car[car['kms_driven'].str.isnumeric()]
car['kms_driven']=car['kms_driven'].astype(int)
car['kms_driven'].unique()

car['kms_driven']
car

"""## Fuel_Type Column Cleaning"""

car=car[~car['fuel_type'].isna()]
car.reset_index(drop=True)

car['fuel_type'].unique()

"""## `#No Null Values Spotted`"""

car.info()

car.describe()

"""Checking Outliers"""

car[car['Price']<6e6].reset_index(drop=True)

print(car.columns)

"""## Keeping name column short"""

# Assuming 'car' is a DataFrame at this point
car['name'] = car['name'].str.split(' ').str.slice(0,3).str.join(' ')
car['name']

car

"""# Final Cleaned Data"""

car.to_csv('Cleaned_Car_data.csv')
car

"""# **[Feature Selection](https://)**

Keeping x with all columns using OneHot Encoder
"""

x = car.drop(columns=['Price'])
y=car['Price']
x

"""Keeping y wuth target column ==  Price"""

y

"""# Train-Test Splitting"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

"""# Training Model"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

"""Column Transformer"""

cat_cols = ['name', 'company', 'fuel_type']
num_cols = ['year', 'kms_driven']

from sklearn.compose import ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols),
        ('num', StandardScaler(), num_cols)
    ]
)

x_final = preprocessor.fit_transform(x)
x_final

model = LinearRegression()

model.fit(x_final, y)  # y is your Price or target column

"""Making Pipeline"""

from sklearn.pipeline import Pipeline
pipeline = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('model', LinearRegression())
])

pipeline.fit(x_train, y_train)

"""# Evaluating Model"""

score = pipeline.score(x_test, y_test)
print(f"Model R^2 Score: {score:.2f}")

y_pred = pipeline.predict(x_test)
y_pred

r2_score(y_test,y_pred)

scores=[]
for i in range(10):
   x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=i)
   lr=LinearRegression()
   pipe=make_pipeline(column_trans,lr)
   pipe.fit(x_train,y_train)
   y_pred=pipe.predict(x_test)
   scores.append(r2_score(y_test,y_pred))
   import numpy as np
np.argmax(scores)

scores[np.argmax(scores)]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=np.argmax(scores))
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(x_train,y_train)
y_pred=pipe.predict(x_test)
r2_score(y_test,y_pred)

"""Dumping Model"""

import pickle
pickle.dump(pipeline,open('LinearRegressionModel.pkl','wb'))

"""# Using Model for Predictions"""

pipe.predict(pd.DataFrame([['Honda','Maruti',2020,100,'Diesel']],columns=['name','company','year','kms_driven','fuel_type']))

